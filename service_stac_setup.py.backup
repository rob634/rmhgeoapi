# ============================================================================
# CLAUDE CONTEXT - SERVICE
# ============================================================================
# PURPOSE: Service handlers for STAC database setup tasks
# EXPORTS: Task handlers for PgSTAC installation, configuration, and verification
# INTERFACES: TaskRegistry - Registers handlers for task execution
# PYDANTIC_MODELS: TaskContext, TaskResult
# DEPENDENCIES: pypgstac[psycopg] for migrations, psycopg for database operations
# SOURCE: Database configuration from environment variables
# SCOPE: One-time database setup operations
# VALIDATION: Verifies PgSTAC installation and functionality
# PATTERNS: Service pattern with registered task handlers
# ENTRY_POINTS: TaskHandlerFactory.get_handler(task_type)
# INDEX:
#   - Line 25: Imports and setup
#   - Line 50: install_pgstac handler
#   - Line 150: configure_pgstac_roles handler
#   - Line 250: verify_pgstac_installation handler
# ============================================================================

import json
import os
from typing import Dict, Any, Optional, List
from datetime import datetime
import psycopg
from psycopg import sql

from schema_base import TaskResult, TaskStatus
from task_factory import TaskRegistry, TaskContext
from util_logger import LoggerFactory, ComponentType
from config import get_config

logger = LoggerFactory.create_logger(ComponentType.SERVICE, __name__)


def get_connection_string(as_admin: bool = False) -> str:
    """
    Get PostgreSQL connection string.

    Args:
        as_admin: If True, use admin credentials (for schema operations)

    Returns:
        PostgreSQL connection string
    """
    # In production, use Key Vault or managed identity
    # For now, using environment variables
    config = get_config()
    return (
        f"postgresql://{config.postgis_user}:{config.postgis_password}@"
        f"{config.postgis_host}:{config.postgis_port}/{config.postgis_database}"
    )


@TaskRegistry.instance().register("install_pgstac")
def create_install_pgstac_handler():
    """Factory function for install_pgstac handler."""

    async def install_pgstac(task_context: TaskCtx) -> Dict[str, Any]:
    """
    Install PgSTAC schema and functions in PostgreSQL.

    This handler:
    1. Optionally drops existing PgSTAC schema (if drop_existing=True)
    2. Runs PgSTAC migrations using pypgstac
    3. Verifies installation by checking for key tables and functions

    Args:
        task_context: Task execution context with parameters

    Returns:
        TaskResult with installation details
    """
    try:
        logger.info(f"üöÄ Starting PgSTAC installation for task {task_context.task_id}")

        # Extract parameters
        params = task_context.parameters
        pgstac_version = params.get("pgstac_version", "0.8.5")
        drop_existing = params.get("drop_existing", False)
        run_migrations = params.get("run_migrations", True)

        # Import pypgstac (lazy import to avoid dependency issues)
        try:
            from pypgstac.migrate import Migrate
            from pypgstac.db import PgstacDB
        except ImportError as e:
            logger.error(f"‚ùå pypgstac not installed: {e}")
            return TaskResult(
                task_id=task_context.task_id,
                job_id=task_context.job_id,
                stage_number=task_context.stage,
                task_type=task_context.task_type,
                status=TaskStatus.FAILED,
                success=False,
                error_details=f"pypgstac not installed: {str(e)}",
                execution_time_seconds=0
            )

        dsn = get_connection_string(as_admin=True)
        tables_created = []
        functions_created = []
        migrations_applied = 0

        # Drop existing schema if requested (DANGEROUS!)
        if drop_existing:
            logger.warning("‚ö†Ô∏è Dropping existing PgSTAC schema...")
            with psycopg.connect(dsn) as conn:
                with conn.cursor() as cur:
                    cur.execute("DROP SCHEMA IF EXISTS pgstac CASCADE")
                    conn.commit()
                    logger.info("‚úÖ Existing PgSTAC schema dropped")

        # Run migrations
        if run_migrations:
            logger.info(f"üì¶ Running PgSTAC migrations (version: {pgstac_version})...")
            try:
                migrate = Migrate(dsn)
                migrate.run_migration()
                migrations_applied = 1  # pypgstac doesn't return count
                logger.info("‚úÖ PgSTAC migrations completed")
            except Exception as e:
                logger.error(f"‚ùå Migration failed: {e}")
                raise

        # Verify installation by checking for key objects
        logger.info("üîç Verifying PgSTAC installation...")
        with psycopg.connect(dsn) as conn:
            with conn.cursor() as cur:
                # Check for tables
                cur.execute("""
                    SELECT tablename
                    FROM pg_tables
                    WHERE schemaname = 'pgstac'
                    ORDER BY tablename
                """)
                tables_created = [row[0] for row in cur.fetchall()]
                logger.info(f"üìã Found {len(tables_created)} PgSTAC tables")

                # Check for functions
                cur.execute("""
                    SELECT proname
                    FROM pg_proc p
                    JOIN pg_namespace n ON p.pronamespace = n.oid
                    WHERE n.nspname = 'pgstac'
                    ORDER BY proname
                    LIMIT 20
                """)
                functions_created = [row[0] for row in cur.fetchall()]
                logger.info(f"üîß Found {len(functions_created)}+ PgSTAC functions")

                # Get installed version
                try:
                    cur.execute("SELECT pgstac.get_version()")
                    version_installed = cur.fetchone()[0]
                    logger.info(f"‚úÖ PgSTAC version {version_installed} installed")
                except Exception:
                    version_installed = pgstac_version

        return TaskResult(
            task_id=task_context.task_id,
            job_id=task_context.job_id,
            stage_number=task_context.stage,
            task_type=task_context.task_type,
            status=TaskStatus.COMPLETED,
            success=True,
            result_data={
                "version_installed": version_installed,
                "migrations_applied": migrations_applied,
                "tables_created": tables_created[:10],  # Limit for logging
                "table_count": len(tables_created),
                "functions_created": functions_created[:10],  # Limit for logging
                "function_count": len(functions_created),
                "message": f"‚úÖ PgSTAC {version_installed} installed successfully"
            },
            execution_time_seconds=0  # Will be calculated by framework
        )

    except Exception as e:
        logger.error(f"‚ùå PgSTAC installation failed: {e}")
        return TaskResult(
            task_id=task_context.task_id,
            job_id=task_context.job_id,
            stage_number=task_context.stage,
            task_type=task_context.task_type,
            status=TaskStatus.FAILED,
            success=False,
            error_details=str(e),
            execution_time_seconds=0
        )


@TaskRegistry.register("configure_pgstac_roles")
async def configure_pgstac_roles(task_context: TaskContext) -> TaskResult:
    """
    Configure database roles and permissions for PgSTAC.

    Creates three roles:
    - pgstac_admin: Full control over pgstac schema
    - pgstac_ingest: Read/write for data operations
    - pgstac_read: Read-only access

    Args:
        task_context: Task execution context

    Returns:
        TaskResult with role configuration details
    """
    try:
        logger.info(f"üë• Configuring PgSTAC roles for task {task_context.task_id}")

        params = task_context.parameters
        roles = params.get("roles", ["pgstac_admin", "pgstac_ingest", "pgstac_read"])
        app_user = params.get("app_user", "rob634")

        dsn = get_connection_string(as_admin=True)
        roles_created = []
        permissions_granted = []

        with psycopg.connect(dsn) as conn:
            with conn.cursor() as cur:
                # Create roles if they don't exist
                for role in roles:
                    try:
                        cur.execute(sql.SQL("CREATE ROLE {} NOLOGIN").format(sql.Identifier(role)))
                        roles_created.append(role)
                        logger.info(f"‚úÖ Created role: {role}")
                    except psycopg.errors.DuplicateObject:
                        logger.info(f"‚ÑπÔ∏è Role already exists: {role}")

                # Grant permissions based on role
                # pgstac_admin - full control
                if "pgstac_admin" in roles:
                    cur.execute("GRANT ALL ON SCHEMA pgstac TO pgstac_admin")
                    cur.execute("GRANT ALL ON ALL TABLES IN SCHEMA pgstac TO pgstac_admin")
                    cur.execute("GRANT ALL ON ALL SEQUENCES IN SCHEMA pgstac TO pgstac_admin")
                    cur.execute("GRANT ALL ON ALL FUNCTIONS IN SCHEMA pgstac TO pgstac_admin")
                    permissions_granted.append("pgstac_admin: ALL on pgstac schema")

                # pgstac_ingest - read/write
                if "pgstac_ingest" in roles:
                    cur.execute("GRANT USAGE ON SCHEMA pgstac TO pgstac_ingest")
                    cur.execute("GRANT SELECT, INSERT, UPDATE, DELETE ON ALL TABLES IN SCHEMA pgstac TO pgstac_ingest")
                    cur.execute("GRANT USAGE ON ALL SEQUENCES IN SCHEMA pgstac TO pgstac_ingest")
                    cur.execute("GRANT EXECUTE ON ALL FUNCTIONS IN SCHEMA pgstac TO pgstac_ingest")
                    permissions_granted.append("pgstac_ingest: READ/WRITE on pgstac")

                # pgstac_read - read only
                if "pgstac_read" in roles:
                    cur.execute("GRANT USAGE ON SCHEMA pgstac TO pgstac_read")
                    cur.execute("GRANT SELECT ON ALL TABLES IN SCHEMA pgstac TO pgstac_read")
                    cur.execute("GRANT EXECUTE ON ALL FUNCTIONS IN SCHEMA pgstac TO pgstac_read")
                    permissions_granted.append("pgstac_read: READ on pgstac")

                # Grant pgstac_ingest to app user for normal operations
                cur.execute(sql.SQL("GRANT pgstac_ingest TO {}").format(sql.Identifier(app_user)))
                permissions_granted.append(f"{app_user}: granted pgstac_ingest role")

                # Also ensure app user can use the schema
                cur.execute(sql.SQL("GRANT USAGE ON SCHEMA pgstac TO {}").format(sql.Identifier(app_user)))

                conn.commit()
                logger.info(f"‚úÖ Configured {len(roles)} roles with permissions")

        return TaskResult(
            task_id=task_context.task_id,
            job_id=task_context.job_id,
            stage_number=task_context.stage,
            task_type=task_context.task_type,
            status=TaskStatus.COMPLETED,
            success=True,
            result_data={
                "roles_created": roles_created,
                "roles_configured": roles,
                "permissions_granted": permissions_granted,
                "app_user_configured": app_user,
                "message": f"‚úÖ Configured {len(roles)} PgSTAC roles"
            },
            execution_time_seconds=0
        )

    except Exception as e:
        logger.error(f"‚ùå Role configuration failed: {e}")
        return TaskResult(
            task_id=task_context.task_id,
            job_id=task_context.job_id,
            stage_number=task_context.stage,
            task_type=task_context.task_type,
            status=TaskStatus.FAILED,
            success=False,
            error_details=str(e),
            execution_time_seconds=0
        )


@TaskRegistry.register("verify_pgstac_installation")
async def verify_pgstac_installation(task_context: TaskContext) -> TaskResult:
    """
    Verify PgSTAC installation and optionally create Bronze collection.

    Runs test queries to verify:
    1. PgSTAC version is accessible
    2. Core functions work
    3. Collections table exists
    4. Search function works

    Optionally creates the Bronze tier collection.

    Args:
        task_context: Task execution context

    Returns:
        TaskResult with verification details
    """
    try:
        logger.info(f"üîç Verifying PgSTAC installation for task {task_context.task_id}")

        params = task_context.parameters
        create_collection = params.get("create_collection", True)
        collection_id = params.get("collection_id", "rmhazure-bronze")
        collection_title = params.get("collection_title", "RMH Azure Bronze Tier")
        collection_description = params.get("collection_description", "Raw geospatial data")
        test_queries = params.get("test_queries", [])

        dsn = get_connection_string()
        test_results = {}
        pgstac_version = None
        collection_count = 0
        collection_created = False

        with psycopg.connect(dsn) as conn:
            # Set search path to include pgstac
            with conn.cursor() as cur:
                cur.execute("SET search_path TO pgstac, public")

                # Test 1: Get PgSTAC version
                try:
                    cur.execute("SELECT pgstac.get_version()")
                    pgstac_version = cur.fetchone()[0]
                    test_results["version_check"] = f"‚úÖ Version: {pgstac_version}"
                    logger.info(f"‚úÖ PgSTAC version: {pgstac_version}")
                except Exception as e:
                    test_results["version_check"] = f"‚ùå Failed: {str(e)}"
                    logger.error(f"‚ùå Version check failed: {e}")

                # Test 2: Check collections table
                try:
                    cur.execute("SELECT COUNT(*) FROM pgstac.collections")
                    collection_count = cur.fetchone()[0]
                    test_results["collections_table"] = f"‚úÖ Found {collection_count} collections"
                    logger.info(f"‚úÖ Collections table accessible: {collection_count} collections")
                except Exception as e:
                    test_results["collections_table"] = f"‚ùå Failed: {str(e)}"
                    logger.error(f"‚ùå Collections table check failed: {e}")

                # Test 3: Test search function
                try:
                    cur.execute("SELECT pgstac.search('{}') LIMIT 1")
                    test_results["search_function"] = "‚úÖ Search function works"
                    logger.info("‚úÖ Search function operational")
                except Exception as e:
                    test_results["search_function"] = f"‚ùå Failed: {str(e)}"
                    logger.error(f"‚ùå Search function test failed: {e}")

                # Create Bronze collection if requested
                if create_collection:
                    try:
                        collection_json = {
                            "id": collection_id,
                            "type": "Collection",
                            "stac_version": "1.0.0",
                            "title": collection_title,
                            "description": collection_description,
                            "license": "proprietary",
                            "extent": {
                                "spatial": {
                                    "bbox": [[-180, -90, 180, 90]]
                                },
                                "temporal": {
                                    "interval": [[None, None]]
                                }
                            },
                            "links": [],
                            "keywords": ["bronze", "raw", "azure", "geospatial"],
                            "providers": [{
                                "name": "RMH Azure",
                                "roles": ["producer", "host"]
                            }]
                        }

                        cur.execute(
                            "SELECT pgstac.create_collection(%s::jsonb)",
                            (json.dumps(collection_json),)
                        )
                        conn.commit()
                        collection_created = True
                        collection_count += 1
                        logger.info(f"‚úÖ Created Bronze collection: {collection_id}")
                        test_results["bronze_collection"] = f"‚úÖ Created: {collection_id}"

                    except psycopg.errors.UniqueViolation:
                        logger.info(f"‚ÑπÔ∏è Collection already exists: {collection_id}")
                        test_results["bronze_collection"] = f"‚ÑπÔ∏è Already exists: {collection_id}"
                    except Exception as e:
                        logger.error(f"‚ùå Failed to create collection: {e}")
                        test_results["bronze_collection"] = f"‚ùå Creation failed: {str(e)}"

                # Run any additional test queries
                for i, query in enumerate(test_queries[:3]):  # Limit to 3 custom tests
                    try:
                        cur.execute(query)
                        result = cur.fetchone()
                        test_results[f"custom_test_{i+1}"] = f"‚úÖ Passed"
                        logger.info(f"‚úÖ Custom test {i+1} passed")
                    except Exception as e:
                        test_results[f"custom_test_{i+1}"] = f"‚ùå Failed: {str(e)[:50]}"
                        logger.warning(f"‚ö†Ô∏è Custom test {i+1} failed: {e}")

        # Determine overall success
        success = pgstac_version is not None and "‚ùå" not in str(test_results.get("search_function", ""))

        return TaskResult(
            task_id=task_context.task_id,
            job_id=task_context.job_id,
            stage_number=task_context.stage,
            task_type=task_context.task_type,
            status=TaskStatus.COMPLETED if success else TaskStatus.FAILED,
            success=success,
            result_data={
                "pgstac_version": pgstac_version,
                "collection_count": collection_count,
                "collection_created": collection_created,
                "test_results": test_results,
                "message": "‚úÖ PgSTAC verification complete" if success else "‚ùå Verification failed"
            },
            execution_time_seconds=0
        )

    except Exception as e:
        logger.error(f"‚ùå PgSTAC verification failed: {e}")
        return TaskResult(
            task_id=task_context.task_id,
            job_id=task_context.job_id,
            stage_number=task_context.stage,
            task_type=task_context.task_type,
            status=TaskStatus.FAILED,
            success=False,
            error_details=str(e),
            execution_time_seconds=0
        )